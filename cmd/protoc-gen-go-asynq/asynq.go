/*
 *
 * Copyright 2024 ASJARD authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	contextPackage = protogen.GoImportPath("context")
	asynqPackage   = protogen.GoImportPath("github.com/asjard/asjard/pkg/server/xasynq")
	serverPackage  = protogen.GoImportPath("github.com/asjard/asjard/core/server")
	// FileDescriptorProto.package field number
	fileDescriptorProtoPackageFieldNumber = 2
	// FileDescriptorProto.syntax field number
	fileDescriptorProtoSyntaxFieldNumber = 12
)

type asynqGenerator struct {
	plugin     *protogen.Plugin
	gen        *protogen.GeneratedFile
	file       *protogen.File
	openapiVar string
}

func NewAsynqGenerator(plugin *protogen.Plugin, file *protogen.File) *asynqGenerator {
	return &asynqGenerator{
		plugin:     plugin,
		file:       file,
		openapiVar: strings.ToLower(file.GoDescriptorIdent.GoName) + "_openapi",
	}
}

func (g *asynqGenerator) Run() *protogen.GeneratedFile {
	if len(g.file.Services) == 0 {
		return nil
	}
	g.gen = g.plugin.NewGeneratedFile(g.file.GeneratedFilenamePrefix+"_asynq.pb.go", g.file.GoImportPath)

	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.gen.P("// Code generated by ", name, ". DO NOT EDIT.")
	g.gen.P("// versions:")
	g.gen.P("// - ", name, " v", version)
	g.gen.P("// - protoc             ", g.protocVersion())
	if g.file.Proto.GetOptions().GetDeprecated() {
		g.gen.P("// ", g.file.Desc.Path(), " is a deprecated file.")
	} else {
		g.gen.P("// source: ", g.file.Desc.Path())
	}
	g.gen.P()

	// Attach all comments associated with the package field.
	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.gen.P("package ", g.file.GoPackageName)
	g.gen.P()

	g.genFileContent()
	return g.gen
}

func (g *asynqGenerator) genFileContent() {
	for _, service := range g.file.Services {
		g.genService(service)
	}
}

func (g *asynqGenerator) genService(service *protogen.Service) {
	handlerNames := make([]string, 0, len(service.Methods))
	serverType := service.GoName + "Server"
	for _, method := range service.Methods {
		hname := g.genServiceMethod(service, serverType, method)
		handlerNames = append(handlerNames, hname)
	}
	g.genServiceDesc(service, serverType, handlerNames)
}

func (g *asynqGenerator) genServiceDesc(service *protogen.Service, serverType string, handlerNames []string) {
	serviceDescVar := service.GoName + "AsynqServiceDesc"
	// Service descriptor.
	g.gen.P("// ", serviceDescVar, " is the ", asynqPackage.Ident("ServiceDesc"), " for ", service.GoName, " service.")
	g.gen.P("// It's only intended for direct use with ", asynqPackage.Ident("AddHandler"), ",")
	g.gen.P("// and not to be introspected or modified (even as a copy)")
	g.genComment(service.Comments)
	g.gen.P("var ", serviceDescVar, " = ", asynqPackage.Ident("ServiceDesc"), " {")
	g.gen.P("ServiceName: ", strconv.Quote(string(service.Desc.FullName())), ",")
	g.gen.P("HandlerType: (*", serverType, ")(nil),")
	g.gen.P("Methods: []", asynqPackage.Ident("MethodDesc"), "{")
	for i, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		var methodDesc []byte
		commentLines := strings.Split(strings.TrimSuffix(method.Comments.Leading.String(), "\n"), "\n")
		commentLinesLen := len(commentLines)
		for index, line := range commentLines {
			methodDesc = append(methodDesc, strings.TrimPrefix(line, "// ")...)
			if index == commentLinesLen-1 {
				methodDesc = append(methodDesc, "."...)
			} else {
				methodDesc = append(methodDesc, ","...)
			}
		}
		g.gen.P("{")
		g.gen.P("Pattern: ", fmt.Sprintf("%s_%s_FullMethodName", service.GoName, method.GoName), ",")
		g.gen.P("Handler: ", handlerNames[i], ",")
		g.gen.P("},")
	}
	g.gen.P("},")
	g.gen.P("}")
	g.gen.P()
}

func (g *asynqGenerator) genServiceMethod(service *protogen.Service, serverType string, method *protogen.Method) string {
	hname := fmt.Sprintf("_%s_%s_AsynqHandler", service.GoName, method.GoName)
	g.genComment(method.Comments)
	g.gen.P("func ", hname, "(ctx *", asynqPackage.Ident("Context"), ", srv any, interceptor ", serverPackage.Ident("UnaryServerInterceptor"), ") (any, error) {")
	g.gen.P("in := new(", method.Input.GoIdent, ")")
	g.gen.P("if interceptor == nil {")
	g.gen.P("return srv.(", serverType, ").", method.GoName, "(ctx, in)")
	g.gen.P("}")
	g.gen.P("info := &", serverPackage.Ident("UnaryServerInfo"), "{")
	g.gen.P("Server: srv,")
	g.gen.P("FullMethod: ", fmt.Sprintf("%s_%s_FullMethodName,", service.GoName, method.GoName))
	g.gen.P("Protocol: ", asynqPackage.Ident("Protocol"), ",")
	g.gen.P("}")
	g.gen.P("handler := func(ctx ", contextPackage.Ident("Context"), ",req any)(any, error) {")
	g.gen.P("return srv.(", serverType, ").", method.GoName, "(ctx, in)")
	g.gen.P("}")
	g.gen.P("return interceptor(ctx, in, info, handler)")
	g.gen.P("}")
	return hname
}

func (g *asynqGenerator) genLeadingComments(loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
}

func (g *asynqGenerator) genComment(comments protogen.CommentSet) {
	if comments.Leading != "" {
		g.gen.P("//")
		g.gen.P(strings.TrimSpace(comments.Leading.String()))
	}
}

func (g *asynqGenerator) protocVersion() string {
	v := g.plugin.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
