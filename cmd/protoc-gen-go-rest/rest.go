/*
 *
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/asjard/asjard/pkg/protobuf/httppb"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	contextPackage = protogen.GoImportPath("context")
	restPackage    = protogen.GoImportPath("github.com/asjard/asjard/pkg/server/rest")
	serverPackage  = protogen.GoImportPath("github.com/asjard/asjard/core/server")
	// restPackage    = protogen.GoImportPath("google.golang.org/grpc")
	// codesPackage   = protogen.GoImportPath("google.golang.org/grpc/codes")
	// statusPackage  = protogen.GoImportPath("google.golang.org/grpc/status")
)

type serviceGenerateHelperInterface interface {
	formatFullMethodSymbol(service *protogen.Service, method *protogen.Method) string
	genFullMethods(g *protogen.GeneratedFile, service *protogen.Service)
	generateClientStruct(g *protogen.GeneratedFile, clientName string)
	generateNewClientDefinitions(g *protogen.GeneratedFile, service *protogen.Service, clientName string)
	generateUnimplementedServerType(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service)
	generateServerFunctions(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, serverType string, serviceDescVar string)
	formatHandlerFuncName(service *protogen.Service, hname string) string
}

type serviceGenerateHelper struct{}

func (serviceGenerateHelper) formatFullMethodSymbol(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("%s_%s_FullMethodName", service.GoName, method.GoName)
}

func (serviceGenerateHelper) genFullMethods(g *protogen.GeneratedFile, service *protogen.Service) {
	if len(service.Methods) == 0 {
		return
	}
	g.P()
}

func (serviceGenerateHelper) generateClientStruct(g *protogen.GeneratedFile, clientName string) {
	g.P("type ", unexport(clientName), " struct {")
	// g.P("cc ", restPackage.Ident("ClientConnInterface"))
	g.P("}")
	g.P()
}

func (serviceGenerateHelper) generateNewClientDefinitions(g *protogen.GeneratedFile, service *protogen.Service, clientName string) {
	g.P("return &", unexport(clientName), "{cc}")
}

func (serviceGenerateHelper) generateUnimplementedServerType(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
}

func (serviceGenerateHelper) generateServerFunctions(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, serverType string, serviceDescVar string) {
	// Server handler implementations.
	handlerNames := make([]string, 0, len(service.Methods))
	for _, method := range service.Methods {
		if httpOptions, ok := proto.GetExtension(method.Desc.Options(), httppb.E_Http).([]*httppb.Http); ok && len(httpOptions) != 0 {
			hname := genServerMethod(gen, file, g, method, serverType, func(hname string) string {
				return hname
			})
			handlerNames = append(handlerNames, hname)
		} else {
			handlerNames = append(handlerNames, "")
		}
	}
	genServiceDesc(file, g, serviceDescVar, serverType, service, handlerNames)
}

func (serviceGenerateHelper) formatHandlerFuncName(service *protogen.Service, hname string) string {
	return hname
}

var helper serviceGenerateHelperInterface = serviceGenerateHelper{}

// FileDescriptorProto.package field number
const fileDescriptorProtoPackageFieldNumber = 2

// FileDescriptorProto.syntax field number
const fileDescriptorProtoSyntaxFieldNumber = 12

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_rest.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	// Attach all comments associated with the syntax field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.P("// Code generated by protoc-gen-go-rest. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-rest v", version)
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	// Attach all comments associated with the package field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	g.P()
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

// genServiceComments copies the comments from the RPC proto definitions
// to the corresponding generated interface file.
func genServiceComments(g *protogen.GeneratedFile, service *protogen.Service) {
	if service.Comments.Leading != "" {
		// Add empty comment line to attach this service's comments to
		// the godoc comments previously output for all services.
		g.P("//")
		g.P(strings.TrimSpace(service.Comments.Leading.String()))
	}
}

func genServerMethodComments(g *protogen.GeneratedFile, method *protogen.Method) {
	if method.Comments.Leading != "" {
		// Add empty comment line to attach this service's comments to
		// the godoc comments previously output for all services.
		g.P("//")
		g.P(strings.TrimSpace(method.Comments.Leading.String()))
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	// Full methods constants.
	helper.genFullMethods(g, service)

	serverType := service.GoName + "Server"
	serviceDescVar := service.GoName + "RestServiceDesc"
	helper.generateServerFunctions(gen, file, g, service, serverType, serviceDescVar)
}

func genServiceDesc(_ *protogen.File, g *protogen.GeneratedFile, serviceDescVar string, serverType string, service *protogen.Service, handlerNames []string) {
	// Service descriptor.
	g.P("// ", serviceDescVar, " is the ", restPackage.Ident("ServiceDesc"), " for ", service.GoName, " service.")
	g.P("// It's only intended for direct use with ", restPackage.Ident("AddHandler"), ",")
	g.P("// and not to be introspected or modified (even as a copy)")
	genServiceComments(g, service)
	g.P("var ", serviceDescVar, " = ", restPackage.Ident("ServiceDesc"), " {")
	g.P("ServiceName: ", strconv.Quote(string(service.Desc.FullName())), ",")
	g.P("HandlerType: (*", serverType, ")(nil),")
	g.P("Methods: []", restPackage.Ident("MethodDesc"), "{")
	apiGroup := ""
	apiClassify := ""
	apiVersion := ""
	if serviceHttpOption, ok := proto.GetExtension(service.Desc.Options(), httppb.E_ServiceHttp).(*httppb.Http); ok {
		if serviceHttpOption != nil && serviceHttpOption.Group != "" {
			apiGroup = serviceHttpOption.Group
			apiClassify = serviceHttpOption.Api
			apiVersion = serviceHttpOption.Version
		}
	}
	for i, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		var methodDesc []byte
		commentLines := strings.Split(strings.TrimSuffix(method.Comments.Leading.String(), "\n"), "\n")
		commentLinesLen := len(commentLines)
		for index, line := range commentLines {
			methodDesc = append(methodDesc, strings.TrimPrefix(line, "// ")...)
			if index == commentLinesLen-1 {
				methodDesc = append(methodDesc, "."...)
			} else {
				methodDesc = append(methodDesc, ","...)
			}
		}
		httpOptions, ok := proto.GetExtension(method.Desc.Options(), httppb.E_Http).([]*httppb.Http)
		if ok {
			for _, httpOption := range httpOptions {
				g.P("{")
				g.P("MethodName: ", strconv.Quote(string(method.Desc.Name())), ",")
				g.P("Desc: ", strconv.Quote(string(methodDesc)), ",")
				var optionMethod, optionPath string
				switch httpOption.GetPattern().(type) {
				case *httppb.Http_Get:
					optionMethod = http.MethodGet
					optionPath = httpOption.GetGet()
				case *httppb.Http_Put:
					optionMethod = http.MethodPut
					optionPath = httpOption.GetPut()
				case *httppb.Http_Post:
					optionMethod = http.MethodPost
					optionPath = httpOption.GetPost()
				case *httppb.Http_Delete:
					optionMethod = http.MethodDelete
					optionPath = httpOption.GetDelete()
				case *httppb.Http_Patch:
					optionMethod = http.MethodPatch
					optionPath = httpOption.GetPatch()
				case *httppb.Http_Head:
					optionMethod = http.MethodHead
					optionPath = httpOption.GetHead()
				}
				g.P("Method:", strconv.Quote(optionMethod), ",")
				// 根据package名称解析
				// api.v1.xxx
				// 第一部分为接口类型
				// 第二部分为接口版本
				apiClassify = httpOption.Api
				apiVersion = httpOption.Version
				if apiClassify == "" || apiVersion == "" {
					serviceFullNameList := strings.Split(string(service.Desc.FullName()), ".")
					if len(serviceFullNameList) < 2 {
						panic("invalid package name")
					}
					if apiClassify == "" {
						apiClassify = serviceFullNameList[0]
					}
					if apiVersion == "" {
						apiVersion = serviceFullNameList[1]
					}
				}
				if httpOption.Group != "" {
					apiGroup = httpOption.Group
				}
				fullPath := ""
				apiClassify = strings.Trim(apiClassify, "/")
				if apiClassify != "" {
					fullPath += "/" + apiClassify
				}
				apiVersion = strings.Trim(apiVersion, "/")
				if apiVersion != "" {
					fullPath += "/" + apiVersion
				}
				apiGroup = strings.Trim(apiGroup, "/")
				if apiGroup != "" {
					fullPath += "/" + apiGroup
				}
				optionPath = strings.Trim(optionPath, "/")
				if optionPath != "" {
					fullPath += "/" + optionPath
				}
				if fullPath == "" {
					fullPath = "/"
				}
				g.P("Path:", strconv.Quote(fullPath), ",")
				g.P("Handler: ", handlerNames[i], ",")
				g.P("},")
			}
		}
	}
	g.P("},")
	g.P("}")
	g.P()
}

func genServerMethod(_ *protogen.Plugin, _ *protogen.File, g *protogen.GeneratedFile, method *protogen.Method, serverType string, hnameFuncNameFormatter func(string) string) string {
	service := method.Parent
	hname := fmt.Sprintf("_%s_%s_RestHandler", service.GoName, method.GoName)
	genServerMethodComments(g, method)
	g.P("func ", hnameFuncNameFormatter(hname), "(ctx *", restPackage.Ident("Context"), ", srv any, interceptor ", serverPackage.Ident("UnaryServerInterceptor"), ") (any, error) {")
	g.P("in := new(", method.Input.GoIdent, ")")
	g.P("if interceptor == nil {")
	g.P("return srv.(", serverType, ").", method.GoName, "(ctx, in)")
	g.P("}")
	g.P("info := &", serverPackage.Ident("UnaryServerInfo"), "{")
	g.P("Server: srv,")
	g.P("FullMethod: \"", service.Desc.FullName(), ".", method.Desc.Name(), "\",")
	g.P("Protocol: ", restPackage.Ident("Protocol"), ",")
	g.P("}")
	g.P("handler := func(ctx ", contextPackage.Ident("Context"), ",req any)(any, error) {")
	g.P("return srv.(", serverType, ").", method.GoName, "(ctx, in)")
	g.P("}")
	g.P("return interceptor(ctx, in, info, handler)")
	g.P("}")
	return hname
}

func genLeadingComments(g *protogen.GeneratedFile, loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.P(protogen.Comments(s))
		g.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.P(protogen.Comments(s))
		g.P()
	}
}

const deprecationComment = "// Deprecated: Do not use."

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
