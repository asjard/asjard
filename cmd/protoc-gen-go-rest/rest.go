/*
 *
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/asjard/asjard/cmd/protoc-gen-go-rest/openapi"
	"github.com/asjard/asjard/pkg/protobuf/httppb"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	contextPackage = protogen.GoImportPath("context")
	restPackage    = protogen.GoImportPath("github.com/asjard/asjard/pkg/server/rest")
	serverPackage  = protogen.GoImportPath("github.com/asjard/asjard/core/server")
	// FileDescriptorProto.package field number
	fileDescriptorProtoPackageFieldNumber = 2
	// FileDescriptorProto.syntax field number
	fileDescriptorProtoSyntaxFieldNumber = 12
)

type RestGenerator struct {
	openapi    *openapi.OpenAPIv3Generator
	plugin     *protogen.Plugin
	gen        *protogen.GeneratedFile
	file       *protogen.File
	openapiVar string
}

func NewRestGenerator(plugin *protogen.Plugin, conf openapi.Configuration, file *protogen.File) *RestGenerator {
	return &RestGenerator{
		openapi:    openapi.NewOpenAPIv3Generator(plugin, conf, []*protogen.File{file}),
		plugin:     plugin,
		file:       file,
		openapiVar: strings.ToLower(file.GoDescriptorIdent.GoName) + "_openapi",
	}
}

func (g *RestGenerator) Run() *protogen.GeneratedFile {
	if len(g.file.Services) == 0 {
		return nil
	}
	g.gen = g.plugin.NewGeneratedFile(g.file.GeneratedFilenamePrefix+"_rest.pb.go", g.file.GoImportPath)

	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.gen.P("// Code generated by ", name, ". DO NOT EDIT.")
	g.gen.P("// versions:")
	g.gen.P("// - ", name, " v", version)
	g.gen.P("// - protoc             ", g.protocVersion())
	if g.file.Proto.GetOptions().GetDeprecated() {
		g.gen.P("// ", g.file.Desc.Path(), " is a deprecated file.")
	} else {
		g.gen.P("// source: ", g.file.Desc.Path())
	}
	g.gen.P()

	// Attach all comments associated with the package field.
	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.gen.P("package ", g.file.GoPackageName)
	g.gen.P()

	g.genFileContent()
	return g.gen
}

func (g *RestGenerator) genOpenapi() {
	b, err := proto.Marshal(g.openapi.BuildDocumentV3())
	if err != nil {
		g.plugin.Error(err)
		return
	}
	g.gen.P("var ", g.openapiVar, " = []byte{")
	for len(b) > 0 {
		n := 16
		if n > len(b) {
			n = len(b)
		}

		s := ""
		for _, c := range b[:n] {
			s += fmt.Sprintf("0x%02x,", c)
		}
		g.gen.P(s)

		b = b[n:]
	}
	g.gen.P("}")
}

func (g *RestGenerator) genFileContent() {
	for _, service := range g.file.Services {
		g.genService(service)
	}
}

func (g *RestGenerator) genService(service *protogen.Service) {
	handlerNames := make([]string, 0, len(service.Methods))
	serverType := service.GoName + "Server"
	var genopenapi bool
	for _, method := range service.Methods {
		hname := g.genServiceMethod(service, serverType, method)
		handlerNames = append(handlerNames, hname)
		if hname != "" {
			genopenapi = true
		}
	}
	g.genServiceDesc(service, serverType, handlerNames, genopenapi)
	if genopenapi {
		g.genOpenapi()
	}
}

func (g *RestGenerator) genServiceDesc(service *protogen.Service, serverType string, handlerNames []string, genopenapi bool) {
	serviceDescVar := service.GoName + "RestServiceDesc"
	// Service descriptor.
	g.gen.P("// ", serviceDescVar, " is the ", restPackage.Ident("ServiceDesc"), " for ", service.GoName, " service.")
	g.gen.P("// It's only intended for direct use with ", restPackage.Ident("AddHandler"), ",")
	g.gen.P("// and not to be introspected or modified (even as a copy)")
	g.genComment(service.Comments)
	g.gen.P("var ", serviceDescVar, " = ", restPackage.Ident("ServiceDesc"), " {")
	g.gen.P("ServiceName: ", strconv.Quote(string(service.Desc.FullName())), ",")
	g.gen.P("HandlerType: (*", serverType, ")(nil),")
	if genopenapi {
		g.gen.P("OpenAPI: ", g.openapiVar, ",")
	}
	g.gen.P("Methods: []", restPackage.Ident("MethodDesc"), "{")
	apiGroup := ""
	apiClassify := ""
	apiVersion := ""
	if serviceHttpOption, ok := proto.GetExtension(service.Desc.Options(), httppb.E_ServiceHttp).(*httppb.Http); ok {
		if serviceHttpOption != nil && serviceHttpOption.Group != "" {
			apiGroup = serviceHttpOption.Group
			apiClassify = serviceHttpOption.Api
			apiVersion = serviceHttpOption.Version
		}
	}
	for i, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		var methodDesc []byte
		commentLines := strings.Split(strings.TrimSuffix(method.Comments.Leading.String(), "\n"), "\n")
		commentLinesLen := len(commentLines)
		for index, line := range commentLines {
			methodDesc = append(methodDesc, strings.TrimPrefix(line, "// ")...)
			if index == commentLinesLen-1 {
				methodDesc = append(methodDesc, "."...)
			} else {
				methodDesc = append(methodDesc, ","...)
			}
		}
		httpOptions, ok := proto.GetExtension(method.Desc.Options(), httppb.E_Http).([]*httppb.Http)
		if ok {
			for _, httpOption := range httpOptions {
				g.gen.P("{")
				g.gen.P("MethodName: ", strconv.Quote(string(method.Desc.Name())), ",")
				g.gen.P("Desc: ", strconv.Quote(string(methodDesc)), ",")
				var optionMethod, optionPath string
				switch httpOption.GetPattern().(type) {
				case *httppb.Http_Get:
					optionMethod = http.MethodGet
					optionPath = httpOption.GetGet()
				case *httppb.Http_Put:
					optionMethod = http.MethodPut
					optionPath = httpOption.GetPut()
				case *httppb.Http_Post:
					optionMethod = http.MethodPost
					optionPath = httpOption.GetPost()
				case *httppb.Http_Delete:
					optionMethod = http.MethodDelete
					optionPath = httpOption.GetDelete()
				case *httppb.Http_Patch:
					optionMethod = http.MethodPatch
					optionPath = httpOption.GetPatch()
				case *httppb.Http_Head:
					optionMethod = http.MethodHead
					optionPath = httpOption.GetHead()
				}
				g.gen.P("Method:", strconv.Quote(optionMethod), ",")
				// 根据package名称解析
				// api.v1.xxx
				// 第一部分为接口类型
				// 第二部分为接口版本
				apiClassify = httpOption.Api
				apiVersion = httpOption.Version
				if apiClassify == "" || apiVersion == "" {
					serviceFullNameList := strings.Split(string(service.Desc.FullName()), ".")
					if len(serviceFullNameList) < 2 {
						panic("invalid package name")
					}
					if apiClassify == "" {
						apiClassify = serviceFullNameList[0]
					}
					if apiVersion == "" {
						apiVersion = serviceFullNameList[1]
					}
				}
				if httpOption.Group != "" {
					apiGroup = httpOption.Group
				}
				fullPath := ""
				apiClassify = strings.Trim(apiClassify, "/")
				if apiClassify != "" {
					fullPath += "/" + apiClassify
				}
				apiVersion = strings.Trim(apiVersion, "/")
				if apiVersion != "" {
					fullPath += "/" + apiVersion
				}
				apiGroup = strings.Trim(apiGroup, "/")
				if apiGroup != "" {
					fullPath += "/" + apiGroup
				}
				optionPath = strings.Trim(optionPath, "/")
				if optionPath != "" {
					fullPath += "/" + optionPath
				}
				if fullPath == "" {
					fullPath = "/"
				}
				g.gen.P("Path:", strconv.Quote(fullPath), ",")
				g.gen.P("Handler: ", handlerNames[i], ",")
				g.gen.P("},")
			}
		}
	}
	g.gen.P("},")
	g.gen.P("}")
	g.gen.P()
}

func (g *RestGenerator) genServiceMethod(service *protogen.Service, serverType string, method *protogen.Method) string {
	if httpOptions, ok := proto.GetExtension(method.Desc.Options(), httppb.E_Http).([]*httppb.Http); !ok || len(httpOptions) == 0 {
		return ""
	}
	hname := fmt.Sprintf("_%s_%s_RestHandler", service.GoName, method.GoName)
	g.genComment(method.Comments)
	g.gen.P("func ", hname, "(ctx *", restPackage.Ident("Context"), ", srv any, interceptor ", serverPackage.Ident("UnaryServerInterceptor"), ") (any, error) {")
	g.gen.P("in := new(", method.Input.GoIdent, ")")
	g.gen.P("if interceptor == nil {")
	g.gen.P("return srv.(", serverType, ").", method.GoName, "(ctx, in)")
	g.gen.P("}")
	g.gen.P("info := &", serverPackage.Ident("UnaryServerInfo"), "{")
	g.gen.P("Server: srv,")
	g.gen.P("FullMethod: \"", service.Desc.FullName(), ".", method.Desc.Name(), "\",")
	g.gen.P("Protocol: ", restPackage.Ident("Protocol"), ",")
	g.gen.P("}")
	g.gen.P("handler := func(ctx ", contextPackage.Ident("Context"), ",req any)(any, error) {")
	g.gen.P("return srv.(", serverType, ").", method.GoName, "(ctx, in)")
	g.gen.P("}")
	g.gen.P("return interceptor(ctx, in, info, handler)")
	g.gen.P("}")
	return hname
}

func (g *RestGenerator) genLeadingComments(loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
}

func (g *RestGenerator) genComment(comments protogen.CommentSet) {
	if comments.Leading != "" {
		g.gen.P("//")
		g.gen.P(strings.TrimSpace(comments.Leading.String()))
	}
}

func (g *RestGenerator) protocVersion() string {
	v := g.plugin.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
