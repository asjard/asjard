/*
 *
 * Copyright 2024 ASJARD authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	contextPackage = protogen.GoImportPath("context")
	restPackage    = protogen.GoImportPath("github.com/asjard/asjard/pkg/server/rest")
	configPackage  = protogen.GoImportPath("github.com/asjard/asjard/core/config")
	clientPackage  = protogen.GoImportPath("github.com/asjard/asjard/core/client")
	grpcPackage    = protogen.GoImportPath("github.com/asjard/asjard/pkg/client/grpc")
	// FileDescriptorProto.package field number
	fileDescriptorProtoPackageFieldNumber = 2
	// FileDescriptorProto.syntax field number
	fileDescriptorProtoSyntaxFieldNumber = 12
)

type GwGenerator struct {
	plugin     *protogen.Plugin
	gen        *protogen.GeneratedFile
	file       *protogen.File
	openapiVar string
}

func NewGwGenerator(plugin *protogen.Plugin, file *protogen.File) *GwGenerator {
	return &GwGenerator{
		plugin: plugin,
		file:   file,
	}
}

func (g *GwGenerator) Run() *protogen.GeneratedFile {
	if len(g.file.Services) == 0 {
		return nil
	}
	g.gen = g.plugin.NewGeneratedFile(g.file.GeneratedFilenamePrefix+"_rest_gw.pb.go", g.file.GoImportPath)

	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.gen.P("// Code generated by ", name, ". DO NOT EDIT.")
	g.gen.P("// versions:")
	g.gen.P("// - ", name, " v", version)
	g.gen.P("// - protoc             ", g.protocVersion())
	if g.file.Proto.GetOptions().GetDeprecated() {
		g.gen.P("// ", g.file.Desc.Path(), " is a deprecated file.")
	} else {
		g.gen.P("// source: ", g.file.Desc.Path())
	}
	g.gen.P()

	// Attach all comments associated with the package field.
	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.gen.P("package ", g.file.GoPackageName)
	g.gen.P()

	g.genFileContent()
	return g.gen
}

func (g *GwGenerator) genFileContent() {
	for _, service := range g.file.Services {
		g.gen.P("type ", service.GoName, "API struct{")
		g.gen.P("Unimplemented", service.GoName, "Server")
		g.gen.P("client ", service.GoName, "Client")
		g.gen.P("}")
		serviceFullName := strings.Split(string(service.Desc.FullName()), ".")
		if len(serviceFullName) < 4 {
			panic("invalid package name, must be {group}.{version}.{service}")
		}
		g.gen.P("func (api *", service.GoName, "API)Start() error {")
		g.gen.P("conn, err := ", clientPackage.Ident("NewClient"), "(", grpcPackage.Ident("Protocol"),
			",",
			configPackage.Ident("GetString"), "(", `"asjard.topology.services.`, serviceFullName[2], `.name",`, `"svc-`, serviceFullName[2], "-", serviceFullName[0], `")`,
			").Conn()")
		g.gen.P("if err != nil {")
		g.gen.P("return err")
		g.gen.P("}")
		g.gen.P("api.client=New", service.GoName, "Client(conn)")
		g.gen.P("return nil")
		g.gen.P("}")

		g.gen.P("func (api *", service.GoName, "API)Stop() {")
		g.gen.P("}")

		g.genService(service)

		g.gen.P("func (api *", service.GoName, "API)RestServiceDesc()*", restPackage.Ident("ServiceDesc"), "{")
		g.gen.P("return &", service.GoName, "RestServiceDesc")
		g.gen.P("}")

	}
}

func (g *GwGenerator) genService(service *protogen.Service) {
	for _, method := range service.Methods {
		g.genServiceMethod(service, method)
	}
}

func (g *GwGenerator) genServiceMethod(service *protogen.Service, method *protogen.Method) {
	// if httpOptions, ok := proto.GetExtension(method.Desc.Options(), httppb.E_Http).([]*httppb.Http); !ok || len(httpOptions) == 0 {
	// 	return
	// }
	g.genComment(method.Comments)
	g.gen.P("func(api *", service.GoName, "API)", method.GoName, "(ctx ", contextPackage.Ident("Context"), ",in *", method.Input.GoIdent, ") (*", method.Output.GoIdent, ",error) {")
	g.gen.P("return api.client.", method.GoName, "(ctx, in)")
	g.gen.P("}")
}

func (g *GwGenerator) genLeadingComments(loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
}

func (g *GwGenerator) genComment(comments protogen.CommentSet) {
	if comments.Leading != "" {
		g.gen.P("//")
		g.gen.P(strings.TrimSpace(comments.Leading.String()))
	}
}

func (g *GwGenerator) protocVersion() string {
	v := g.plugin.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
