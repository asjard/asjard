/*
 *
 * Copyright 2024 ASJARD authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/asjard/asjard/cmd/protoc-gen-go-rest/utils"
	"github.com/asjard/asjard/pkg/protobuf/httppb"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	// FileDescriptorProto.package field number
	fileDescriptorProtoPackageFieldNumber = 2
	// FileDescriptorProto.syntax field number
	fileDescriptorProtoSyntaxFieldNumber = 12
)

type TsGenerator struct {
	plugin     *protogen.Plugin
	gen        *protogen.GeneratedFile
	file       *protogen.File
	openapiVar string
}

func NewGwGenerator(plugin *protogen.Plugin, file *protogen.File) *TsGenerator {
	return &TsGenerator{
		plugin: plugin,
		file:   file,
	}
}

func (g *TsGenerator) Run() *protogen.GeneratedFile {
	if len(g.file.Services) == 0 {
		return nil
	}
	filenamePrefix := strings.Join(strings.Split(g.file.GeneratedFilenamePrefix, "/")[1:], "/")
	g.gen = g.plugin.NewGeneratedFile(filenamePrefix+"_umi.pb.ts", g.file.GoImportPath)

	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.gen.P("// Code generated by ", name, ". DO NOT EDIT.")
	g.gen.P("// versions:")
	g.gen.P("// - ", name, " v", version)
	g.gen.P("// - protoc             ", g.protocVersion())
	if g.file.Proto.GetOptions().GetDeprecated() {
		g.gen.P("// ", g.file.Desc.Path(), " is a deprecated file.")
	} else {
		g.gen.P("// source: ", g.file.Desc.Path())
	}
	g.gen.P()

	// Attach all comments associated with the package field.
	g.genLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))

	g.genFileContent()
	return g.gen
}

func (g *TsGenerator) genFileContent() {
	g.gen.P("import { request } from '@umijs/max';")
	g.gen.P()
	for _, service := range g.file.Services {
		g.genService(service)
	}
}

func (g *TsGenerator) genService(service *protogen.Service) {
	for _, method := range service.Methods {
		g.genServiceMethod(service, method)
	}
}

func (g *TsGenerator) genServiceMethod(service *protogen.Service, method *protogen.Method) {
	httpOptions, ok := proto.GetExtension(method.Desc.Options(), httppb.E_Http).([]*httppb.Http)
	if !ok || len(httpOptions) == 0 {
		return
	}
	for idx, httpOption := range httpOptions {
		g.genComment(method.Comments)
		funcName := method.GoName
		if idx != 0 {
			funcName += strconv.Itoa(idx)
		}
		g.gen.P("export async function ", funcName, "(")
		option := utils.ParseMethodHttpOption(service, httpOption)
		pathReplace := ""

		switch option.Method {
		case http.MethodPut, http.MethodPost, http.MethodPatch:
			g.gen.P("body:", method.Input.Desc.FullName(), ",")
			pathReplace = "${body."
		default:
			g.gen.P("params:", method.Input.Desc.FullName(), ",")
			pathReplace = "${params."
		}
		g.gen.P("options?: { [key: string]: any },")
		g.gen.P("){")

		path := option.GetPath()
		// 路径是否包含参数
		// `/path/${params.id}/`
		// `/path/${body.id}`
		if strings.Contains(path, "{") && strings.Contains(path, "}") {
			path = "`" + strings.ReplaceAll(path, "{", pathReplace) + "`"
		} else {
			path = "'" + path + "'"
		}

		g.gen.P("return request<{data:", method.Output.Desc.FullName(), "}>(", path, ",{")
		g.gen.P("method: '", option.Method, "',")
		switch option.Method {
		case http.MethodPut, http.MethodPost, http.MethodPatch:
			g.gen.P("body: body,")
		default:
			g.gen.P("params: {...params},")
		}
		g.gen.P("...(options || {}),")
		g.gen.P("});")
		g.gen.P("}")
	}
}

func (g *TsGenerator) genLeadingComments(loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
}

func (g *TsGenerator) genComment(comments protogen.CommentSet) {
	if comments.Leading != "" {
		g.gen.P(strings.TrimSpace(comments.Leading.String()))
	}
	if comments.Trailing != "" {
		g.gen.P(strings.TrimSpace(comments.Trailing.String()))
	}
}

func (g *TsGenerator) protocVersion() string {
	v := g.plugin.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
