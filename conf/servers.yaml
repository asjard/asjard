servers:
  grpc:
    addresses:
      grpc: 127.0.0.1:8080
  http:
    # The maximum number of concurrent connections the server may serve.
    #
    # DefaultConcurrency is used if not set.
    #
    # Concurrency only works if you either call Serve once, or only ServeConn multiple times.
    # It works with ListenAndServe as well.
    concurrency: !!int 262144

    # Per-connection buffer size for requests' reading.
    # This also limits the maximum header size.
    #
    # Increase this buffer if your clients send multi-KB RequestURIs
    # and/or multi-KB headers (for example, BIG cookies).
    #
    # Default buffer size is used if not set.
    readBufferSize: !!int 4096

    # Per-connection buffer size for responses' writing.
    #
    # Default buffer size is used if not set.
    writeBufferSize: !!int 4096

    # ReadTimeout is the amount of time allowed to read
    # the full request including body. The connection's read
    # deadline is reset when the connection opens, or for
    # keep-alive connections after the first byte has been read.
    #
    # By default request read timeout is unlimited.
    readTimeout: !!str 0

    # WriteTimeout is the maximum duration before timing out
    # writes of the response. It is reset after the request handler
    # has returned.
    #
    # By default response write timeout is unlimited.
    writeTimeout: !!str 0

    # IdleTimeout is the maximum amount of time to wait for the
    # next request when keep-alive is enabled. If IdleTimeout
    # is zero, the value of ReadTimeout is used.
    idleTimeout: !!str 0

    # Maximum number of concurrent client connections allowed per IP.
    #
    # By default unlimited number of concurrent connections
    # may be established to the server from a single IP address.
    maxConnsPerIP: !!int 0

    # Maximum number of requests served per connection.
    #
    # The server closes connection after the last request.
    # 'Connection: close' header is added to the last response.
    #
    # By default unlimited number of requests may be served per connection.
    maxRequestsPerConn: !!int 0

    # MaxIdleWorkerDuration is the maximum idle time of a single worker in the underlying
    # worker pool of the Server. Idle workers beyond this time will be cleared.
    maxIdleWorkerDuration: !!str 0

    # Period between tcp keep-alive messages.
    #
    # TCP keep-alive period is determined by operation system by default.
    # TCPKeepalivePeriod: time.Duration

    # Maximum request body size.
    #
    # The server rejects requests with bodies exceeding this limit.
    #
    # Request body size is limited by DefaultMaxRequestBodySize by default.
    # MaxRequestBodySize int

    # Whether to disable keep-alive connections.
    #
    # The server will close all the incoming connections after sending
    # the first response to client if this option is set to true.
    #
    # By default keep-alive connections are enabled.
    # DisableKeepalive bool

    # Whether to enable tcp keep-alive connections.
    #
    # Whether the operating system should send tcp keep-alive messages on the tcp connection.
    #
    # By default tcp keep-alive connections are disabled.
    # TCPKeepalive bool

    # Aggressively reduces memory usage at the cost of higher CPU usage
    # if set to true.
    #
    # Try enabling this option only if the server consumes too much memory
    # serving mostly idle keep-alive connections. This may reduce memory
    # usage by more than 50%.
    #
    # Aggressive memory usage reduction is disabled by default.
    # ReduceMemoryUsage bool

    # Rejects all non-GET requests if set to true.
    #
    # This option is useful as anti-DoS protection for servers
    # accepting only GET requests and HEAD requests. The request size is limited
    # by ReadBufferSize if GetOnly is set.
    #
    # Server accepts all the requests by default.
    # GetOnly bool

    # Will not pre parse Multipart Form data if set to true.
    #
    # This option is useful for servers that desire to treat
    # multipart form data as a binary blob, or choose when to parse the data.
    #
    # Server pre parses multipart form data by default.
    # DisablePreParseMultipartForm bool

    # Logs all errors, including the most frequent
    # 'connection reset by peer', 'broken pipe' and 'connection timeout'
    # errors. Such errors are common in production serving real-world
    # clients.
    #
    # By default the most frequent errors such as
    # 'connection reset by peer', 'broken pipe' and 'connection timeout'
    # are suppressed in order to limit output log traffic.
    # LogAllErrors bool

    # Will not log potentially sensitive content in error logs
    #
    # This option is useful for servers that handle sensitive data
    # in the request/response.
    #
    # Server logs all full errors by default.
    # SecureErrorLogMessage bool

    # Header names are passed as-is without normalization
    # if this option is set.
    #
    # Disabled header names' normalization may be useful only for proxying
    # incoming requests to other servers expecting case-sensitive
    # header names. See https:#github.com/valyala/fasthttp/issues/57
    # for details.
    #
    # By default request and response header names are normalized, i.e.
    # The first letter and the first letters following dashes
    # are uppercased, while all the other letters are lowercased.
    # Examples:
    #
    #     * HOST -> Host
    #     * content-type -> Content-Type
    #     * cONTENT-lenGTH -> Content-Length
    # DisableHeaderNamesNormalizing bool

    # SleepWhenConcurrencyLimitsExceeded is a duration to be slept of if
    # the concurrency limit in exceeded (default [when is 0]: don't sleep
    # and accept new connections immediately).
    # SleepWhenConcurrencyLimitsExceeded time.Duration

    # NoDefaultServerHeader, when set to true, causes the default Server header
    # to be excluded from the Response.
    #
    # The default Server header value is the value of the Name field or an
    # internal default value in its absence. With this option set to true,
    # the only time a Server header will be sent is if a non-zero length
    # value is explicitly provided during a request.
    # NoDefaultServerHeader bool

    # NoDefaultDate, when set to true, causes the default Date
    # header to be excluded from the Response.
    #
    # The default Date header value is the current date value. When
    # set to true, the Date will not be present.
    # NoDefaultDate bool

    # NoDefaultContentType, when set to true, causes the default Content-Type
    # header to be excluded from the Response.
    #
    # The default Content-Type header value is the internal default value. When
    # set to true, the Content-Type will not be present.
    # NoDefaultContentType bool

    # KeepHijackedConns is an opt-in disable of connection
    # close by fasthttp after connections' HijackHandler returns.
    # This allows to save goroutines, e.g. when fasthttp used to upgrade
    # http connections to WS and connection goes to another handler,
    # which will close it when needed.
    # KeepHijackedConns bool

    # CloseOnShutdown when true adds a `Connection: close` header when the server is shutting down.
    # CloseOnShutdown bool

    # StreamRequestBody enables request body streaming,
    # and calls the handler sooner when given body is
    # larger than the current limit.
    # StreamRequestBody bool
    addresses:
      rest: 127.0.0.1:8080