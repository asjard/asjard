asjard:
  ## 数据相关配置
  stores:
    ## gorm数据库相关配置
    gorm:
      ## 数据库列表
      dbs:
        ## default数据库配置
        default:
          ## 此字段受cipherName保护
          dsn: root:my-secret-pw@tcp(127.0.0.1:3306)/exmple-database?charset=utf8&parseTime=True&loc=Local
          ## 数据库驱动
          ## mysql, postgres,sqlite,sqlserver,clickhouse
          ## ref: https://gorm.io/zh_CN/docs/connecting_to_the_database.html#PostgreSQL
          driver: mysql
          ## 加密组件名称
          ## 不为空则使用加密组件解密后连接数据库
          cipherName: ""
          ## 加密组件参数, map[string]any类型
          cipherParams: {}
          ## 驱动自定义配置
          options:
            ## 继承asjard.stores.gorm.options
            ## 自定义驱动名称
            ## ref: https://gorm.io/docs/connecting_to_the_database.html#Customize-Driver
            # driverName: ""
      ## 数据库连接配置
      options:
        # maxIdleConns: 10
        # maxOpenConns: 1001
        # connMaxIdleTime: 10
        # connMaxLifeTime: 2h
        # debug: false
        # skipInitializeWithVersion: false
        # skipDefaultTransaction: false
        # traceable: false
        # metricsable: false

    ## etcd相关配置
    etcd:
      ## etcd列表
      clients:
        default:
          ## etcd地址列表
          ## endpoints,username,password受cipherName保护
          endpoints:
            - 127.0.0.1:2379
          # endpoints: 127.0.0.1:2379
          ## Username is a user name for authentication.
          # userName: ""

          ## Password is a password for authentication.
          # password: ""
          ## 解密组件名称
          cipherName: ""
          cipherParams: {}
      options:
        ## AutoSyncInterval is the interval to update endpoints with its latest members.
        ## 0 disables auto-sync. By default auto-sync is disabled.
        # autoSyncInterval: 0s

        ## DialTimeout is the timeout for failing to establish a connection.
        # dialTimeout: 3s

        ## DialKeepAliveTime is the time after which client pings the server to see if
        ## transport is alive.
        # dialKeepAliveTime: 3s

        ## DialKeepAliveTimeout is the time that the client waits for a response for the
        ## keep-alive probe. If the response is not received in this time, the connection is closed.
        # dialKeepAliveTimeout: 5s

        ## MaxCallSendMsgSize is the client-side request send limit in bytes.
        ## If 0, it defaults to 2.0 MiB (2 * 1024 * 1024).
        ## Make sure that "MaxCallSendMsgSize" < server-side default send/recv limit.
        ## ("--max-request-bytes" flag to etcd or "embed.Config.MaxRequestBytes").
        # maxCallSendMsgSize: 2097152

        ## MaxCallRecvMsgSize is the client-side response receive limit.
        ## If 0, it defaults to "math.MaxInt32", because range response can
        ## easily exceed request send limits.
        ## Make sure that "MaxCallRecvMsgSize" >= server-side default send/recv limit.
        ## ("--max-request-bytes" flag to etcd or "embed.Config.MaxRequestBytes").
        # maxCallRecvMsgSize: 2147483647

        ## RejectOldCluster when set will refuse to create a client against an outdated cluster.
        # projectOldCluster: false

        ## PermitWithoutStream when set will allow client to send keepalive pings to server without any active streams(RPCs).
        # permitWithoutStream: false

        ## MaxUnaryRetries is the maximum number of retries for unary RPCs.
        # maxUnaryRetries: 0

        ## BackoffWaitBetween is the wait time before retrying an RPC.
        # backoffWaitBetween: 0s

        ## BackoffJitterFraction is the jitter fraction to randomize backoff wait time.
        # backoffJitterFraction: 0.0
        ## ASJARD_CERT_DIR路径下的文件
        # caFile: ""
        # certFile: ""
        # keyFile: ""

    rabbitmq:
      clients:
        default:
          ## url受cipherName保护
          url: ""
          vhost: ""
          ## 解密组件名称
          cipherName: ""
          cipherParams: {}
        options:
          channelMax: 0
          frameSize: 0
          heartBeat: 1s
    ## redis相关配置
    redis:
      clients:
        default:
          ## host:port address
          ## address,username,password受cipherName保护
          # address: 127.0.0.1
          # username: ""
          # password: ""
          ## 加解密组件名称
          cipherName: ""
          cipherParams: {}
          # db: 0
          options:
            ## 继承asjard.stores.redis.options
        # cache: ${asjard.stores.clients.default}
      options:
        ## ClientName will execute the `CLIENT SETNAME ClientName` command for each conn.
        # clientName: ""

        ## Protocol 2 or 3. Use the version to negotiate RESP version with redis-server.
        ## Default is 3.
        # protocol: 3

        ## Maximum number of retries before giving up.
        ## Default is 3 retries; -1 (not 0) disables retries.
        # maxRetries: 3

        ## Minimum backoff between each retry.
        ## Default is 8 milliseconds; -1 disables backoff.
        # minRetryBackoff: 8ms

        ## Maximum backoff between each retry.
        ## Default is 512 milliseconds; -1 disables backoff.
        # maxRetryBackoff: 512ms

        ## Dial timeout for establishing new connections.
        ## Default is 5 seconds.
        # dialTimeout:5s

        ## Timeout for socket reads. If reached, commands will fail
        ## with a timeout instead of blocking. Supported values:
        ##   - `0` - default timeout (3 seconds).
        ##   - `-1` - no timeout (block indefinitely).
        ##   - `-2` - disables SetReadDeadline calls completely.
        # readTimeout: 0

        ## Timeout for socket writes. If reached, commands will fail
        ## with a timeout instead of blocking.  Supported values:
        ##   - `0` - default timeout (3 seconds).
        ##   - `-1` - no timeout (block indefinitely).
        ##   - `-2` - disables SetWriteDeadline calls completely.
        # writeTimeout: 0

        ## ContextTimeoutEnabled controls whether the client respects context timeouts and deadlines.
        ## See https://redis.uptrace.dev/guide/go-redis-debugging.html#timeouts
        # contextTimeoutEnabled: false

        ## Type of connection pool.
        ## true for FIFO pool, false for LIFO pool.
        ## Note that FIFO has slightly higher overhead compared to LIFO,
        ## but it helps closing idle connections faster reducing the pool size.
        # poolFIFO: false

        ## Base number of socket connections.
        ## Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.
        ## If there is not enough connections in the pool, new connections will be allocated in excess of PoolSize,
        ## you can limit it through MaxActiveConns
        # poolSize: 10

        ## Amount of time client waits for connection if all connections
        ## are busy before returning an error.
        ## Default is ReadTimeout + 1 second.
        # poolTimeout: 0s

        ## Minimum number of idle connections which is useful when establishing
        ## new connection is slow.
        ## Default is 0. the idle connections are not closed by default.
        # minIdleConns: 0

        ## Maximum number of idle connections.
        ## Default is 0. the idle connections are not closed by default.
        # maxIdleConns:0

        ## Maximum number of connections allocated by the pool at a given time.
        ## When zero, there is no limit on the number of connections in the pool.
        # maxActiveConns: 0

        ## ConnMaxIdleTime is the maximum amount of time a connection may be idle.
        ## Should be less than server's timeout.
        ##
        ## Expired connections may be closed lazily before reuse.
        ## If d <= 0, connections are not closed due to a connection's idle time.
        ##
        ## Default is 30 minutes. -1 disables idle timeout check.
        # connMaxIdleTime: 30m

        ## ConnMaxLifetime is the maximum amount of time a connection may be reused.
        ##
        ## Expired connections may be closed lazily before reuse.
        ## If <= 0, connections are not closed due to a connection's age.
        ##
        ## Default is to not close idle connections.
        # connMaxLifetime: 0s

        ## Disable set-lib on connect. Default is false.
        # disableIndentity: false

        ## Add suffix to client name. Default is empty.
        # identitySuffix: ""

    consul:
      clients:
        default:
          ## address,username,password受cipherName保护
          # address: 127.0.0.1:8500
          # schema: ""
          # pathPrefix: ""
          # datacenter: ""
          # username: ""
          # password: ""
          # waitTime: 0s
          # token: ""
          # namespace: ""
          # partition: ""
          ## 解密组件名称
          cipherName: ""
          cipherParams: {}
    mongo:
      clients:
        default:
          uri: mongodb://127.0.0.1:27017,127.0.0.2:27017/database?authSource=admin
