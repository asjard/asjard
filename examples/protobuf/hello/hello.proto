syntax = "proto3";

package api.v1.hello;

option go_package = "github.com/asjard/asjard/examples/protobuf/hello;hello";

import "github.com/asjard/protobuf/http.proto";
import "google/protobuf/empty.proto";

service Hello {
    // option (asjard.api.serviceHttp) = {
    //     group : "hello"
    // };

    // say something
    rpc Say(SayReq) returns (SayReq) {
        option (asjard.api.http) = {
            post : "/region/{region_id}/project/{project_id}/user/{user_id}"
        };
        option (asjard.api.http) = {
            get : "/region/{region_id}/project/{project_id}/user/{user_id}"
        };
    };
    rpc Call(SayReq) returns (SayReq) {
        option (asjard.api.http) = {
            post : "/call/region/{region_id}/project/{project_id}/user/{user_id}"
        };
    };

    // 获取日志
    rpc Log(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (asjard.api.http) = {
            get : "/log"
        };
    };

    // 加解密示例
    rpc CipherExample(CipherExampleReq) returns (CipherExampleResp) {
        option (asjard.api.http) = {
            get : "/examples/cipher"
        };
    };
    // mysql数据库示例
    rpc MysqlExample(MysqlExampleReq) returns (MysqlExampleResp) {
        option (asjard.api.http) = {
            post : "/examples/mysql"
        };
    };
}

// 加解密示例请求
message CipherExampleReq {}

message MysqlExampleReq {
    string name = 1;
    uint32 age  = 2;
}

message MysqlExampleResp {
    int64  id         = 1;
    string name       = 2;
    uint32 age        = 3;
    string created_at = 4;
    string updated_at = 5;
}

// 加解密示例返回
message CipherExampleResp {
    string aes_encrypt_value_in_plain_file          = 1;
    string base64_encrypt_value_in_plain_file       = 2;
    string plain_value_in_aes_encrypt_file          = 3;
    string aes_encrypt_value_in_aes_encrypt_file    = 4;
    string base64_encrypt_value_in_aes_encrypt_file = 5;
}

message SayReq {
    string          region_id             = 1;
    string          project_id            = 2;
    int64           user_id               = 3;
    repeated string str_list              = 4;
    repeated int64  int_list              = 5;
    SayObj          obj                   = 6;
    repeated SayObj objs                  = 7;
    Configs         configs               = 8;
    int32           page                  = 9;
    int32           size                  = 10;
    string          sort                  = 11;
    optional bool   ok                    = 12;
    optional int32  int_optional_value    = 13;
    optional string string_optional_value = 14;
    optional Kind   kind                  = 15;
    repeated Kind   kinds                 = 16;
}

message Configs {
    string timeout                                            = 1;
    string field_in_different_file_under_same_section         = 2;
    string another_field_in_different_file_under_same_section = 3;
}

message SayObj {
    int32  field_int = 1;
    string field_str = 2;
}

enum Kind {
    K_A = 0;
    K_B = 1;
}
