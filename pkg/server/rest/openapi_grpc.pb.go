// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: openapi.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenAPI_Yaml_FullMethodName       = "/asjard.api.OpenAPI/Yaml"
	OpenAPI_Json_FullMethodName       = "/asjard.api.OpenAPI/Json"
	OpenAPI_Page_FullMethodName       = "/asjard.api.OpenAPI/Page"
	OpenAPI_ScalarPage_FullMethodName = "/asjard.api.OpenAPI/ScalarPage"
)

// OpenAPIClient is the client API for OpenAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenAPIClient interface {
	// Get openapi yaml file.
	Yaml(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get openapi json file.
	Json(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Redict to configured openapi page.
	Page(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Show a scalar openapi page.
	ScalarPage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type openAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAPIClient(cc grpc.ClientConnInterface) OpenAPIClient {
	return &openAPIClient{cc}
}

func (c *openAPIClient) Yaml(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OpenAPI_Yaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAPIClient) Json(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OpenAPI_Json_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAPIClient) Page(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OpenAPI_Page_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAPIClient) ScalarPage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OpenAPI_ScalarPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenAPIServer is the server API for OpenAPI service.
// All implementations must embed UnimplementedOpenAPIServer
// for forward compatibility
type OpenAPIServer interface {
	// Get openapi yaml file.
	Yaml(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Get openapi json file.
	Json(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Redict to configured openapi page.
	Page(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Show a scalar openapi page.
	ScalarPage(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedOpenAPIServer()
}

// UnimplementedOpenAPIServer must be embedded to have forward compatible implementations.
type UnimplementedOpenAPIServer struct {
}

func (UnimplementedOpenAPIServer) Yaml(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Yaml not implemented")
}
func (UnimplementedOpenAPIServer) Json(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Json not implemented")
}
func (UnimplementedOpenAPIServer) Page(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (UnimplementedOpenAPIServer) ScalarPage(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScalarPage not implemented")
}
func (UnimplementedOpenAPIServer) mustEmbedUnimplementedOpenAPIServer() {}

// UnsafeOpenAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAPIServer will
// result in compilation errors.
type UnsafeOpenAPIServer interface {
	mustEmbedUnimplementedOpenAPIServer()
}

func RegisterOpenAPIServer(s grpc.ServiceRegistrar, srv OpenAPIServer) {
	s.RegisterService(&OpenAPI_ServiceDesc, srv)
}

func _OpenAPI_Yaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAPIServer).Yaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAPI_Yaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAPIServer).Yaml(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAPI_Json_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAPIServer).Json(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAPI_Json_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAPIServer).Json(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAPI_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAPIServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAPI_Page_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAPIServer).Page(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAPI_ScalarPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAPIServer).ScalarPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAPI_ScalarPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAPIServer).ScalarPage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenAPI_ServiceDesc is the grpc.ServiceDesc for OpenAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asjard.api.OpenAPI",
	HandlerType: (*OpenAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Yaml",
			Handler:    _OpenAPI_Yaml_Handler,
		},
		{
			MethodName: "Json",
			Handler:    _OpenAPI_Json_Handler,
		},
		{
			MethodName: "Page",
			Handler:    _OpenAPI_Page_Handler,
		},
		{
			MethodName: "ScalarPage",
			Handler:    _OpenAPI_ScalarPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}
