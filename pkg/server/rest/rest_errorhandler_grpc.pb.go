// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: rest_errorhandler.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ErrorHandler_NotFound_FullMethodName         = "/asjard.api.ErrorHandler/NotFound"
	ErrorHandler_MethodNotAllowed_FullMethodName = "/asjard.api.ErrorHandler/MethodNotAllowed"
	ErrorHandler_Panic_FullMethodName            = "/asjard.api.ErrorHandler/Panic"
	ErrorHandler_Error_FullMethodName            = "/asjard.api.ErrorHandler/Error"
)

// ErrorHandlerClient is the client API for ErrorHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorHandlerClient interface {
	// 页面未找到
	NotFound(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 请求方式错误
	MethodNotAllowed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 奔溃
	Panic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 错误
	Error(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type errorHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorHandlerClient(cc grpc.ClientConnInterface) ErrorHandlerClient {
	return &errorHandlerClient{cc}
}

func (c *errorHandlerClient) NotFound(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ErrorHandler_NotFound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorHandlerClient) MethodNotAllowed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ErrorHandler_MethodNotAllowed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorHandlerClient) Panic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ErrorHandler_Panic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorHandlerClient) Error(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ErrorHandler_Error_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorHandlerServer is the server API for ErrorHandler service.
// All implementations must embed UnimplementedErrorHandlerServer
// for forward compatibility
type ErrorHandlerServer interface {
	// 页面未找到
	NotFound(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 请求方式错误
	MethodNotAllowed(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 奔溃
	Panic(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 错误
	Error(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedErrorHandlerServer()
}

// UnimplementedErrorHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedErrorHandlerServer struct {
}

func (UnimplementedErrorHandlerServer) NotFound(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotFound not implemented")
}
func (UnimplementedErrorHandlerServer) MethodNotAllowed(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodNotAllowed not implemented")
}
func (UnimplementedErrorHandlerServer) Panic(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Panic not implemented")
}
func (UnimplementedErrorHandlerServer) Error(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedErrorHandlerServer) mustEmbedUnimplementedErrorHandlerServer() {}

// UnsafeErrorHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorHandlerServer will
// result in compilation errors.
type UnsafeErrorHandlerServer interface {
	mustEmbedUnimplementedErrorHandlerServer()
}

func RegisterErrorHandlerServer(s grpc.ServiceRegistrar, srv ErrorHandlerServer) {
	s.RegisterService(&ErrorHandler_ServiceDesc, srv)
}

func _ErrorHandler_NotFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServer).NotFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorHandler_NotFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServer).NotFound(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorHandler_MethodNotAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServer).MethodNotAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorHandler_MethodNotAllowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServer).MethodNotAllowed(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorHandler_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorHandler_Panic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServer).Panic(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorHandler_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorHandler_Error_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServer).Error(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorHandler_ServiceDesc is the grpc.ServiceDesc for ErrorHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asjard.api.ErrorHandler",
	HandlerType: (*ErrorHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotFound",
			Handler:    _ErrorHandler_NotFound_Handler,
		},
		{
			MethodName: "MethodNotAllowed",
			Handler:    _ErrorHandler_MethodNotAllowed_Handler,
		},
		{
			MethodName: "Panic",
			Handler:    _ErrorHandler_Panic_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _ErrorHandler_Error_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rest_errorhandler.proto",
}
